name: DevOpsProject CI/CD

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  # Example: linters still run in parallel
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pip install ruff black
      - run: ruff check .
      - run: black --check .

  # --- Build Job ---
  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t devops-project:${{ github.sha }} .

      - name: Save image for later jobs
        run: docker save devops-project:${{ github.sha }} -o image.tar
      - uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  db-test:
    runs-on: ubuntu-latest
    needs: build
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v3

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client
      
      - name: Apply migrations
        run: |
          psql "postgresql://testuser:testpass@localhost:5432/testdb" -f db/migrations/create_table_users.sql
          psql "postgresql://testuser:testpass@localhost:5432/testdb" -f db/migrations/add_users_1.sql

      - name: Install Python dependencies
        run: pip install -r app/db-requirements.txt

      - name: Run DB tests
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        run: pytest app/tests/test_db.py


  setup-docker-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Build, load, run container, healthcheck, etc.
      - uses: actions/checkout@v3

      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load -i image.tar

  # --- Test Job ---
  test-container:
    runs-on: ubuntu-latest
    needs: [build, setup-docker-image]
    steps:
      - uses: actions/checkout@v3

      # - name: Download built image
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: docker-image
      #     path: .

      # - name: Load Docker image
      #   run: docker load -i image.tar

      - name: Run container
        run: docker run -d -p 8080:8080 --name devops-test devops-project:${{ github.sha }}

      - name: Wait for app to start
        run: sleep 5
      
      - name: Check container status
        run: docker ps -a

      - name: Show container logs
        run: docker logs devops-test

      - name: Run healthcheck test
        run: curl --retry 5 --retry-connrefused http://localhost:8080/healthz

      - name: Run pytest inside container
        run: docker exec devops-test env PYTHONPATH=/app pytest -q

  # --- Deploy Job ---
  deploy:
    runs-on: ubuntu-latest
    needs: test-container
    steps:
      - uses: actions/checkout@v3

      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: docker load -i image.tar

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image
        run: |
          docker tag devops-project:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/devops-project:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/devops-project:latest

  # k8s-kind:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - uses: actions/checkout@v3

  #     # Set up a Kind (Kubernetes-in-Docker) cluster
  #     - name: Create Kind cluster
  #       uses: helm/kind-action@v1
  #       with:
  #         cluster_name: devops-cluster
  #         wait: 60s

  #     # âœ… Deploy your manifests into Kind
  #     - name: Deploy to Kind
  #       run: |
  #         kubectl apply -f deploy/kubernetes/deployment.yaml
  #         kubectl apply -f deploy/kubernetes/service.yaml

  #     # Verify pods are running
  #     - name: Check pods
  #       run: kubectl get pods -A

  #     # Run a test request against your service
  #     - name: Test service
  #       run: |
  #         kubectl port-forward svc/devops-project 8080:80 &
  #         sleep 5
  #         curl --retry 5 --retry-connrefused http://localhost:8080/healthz


  # k8s-deploy:
  #   runs-on: ubuntu-latest
  #   needs: deploy
  #   steps:
  #     - uses: actions/checkout@v3

  #     # 1. Log in to Azure using a service principal
  #     - name: Azure login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     # 2. Set AKS context (so kubectl points to the right cluster)
  #     - name: Set AKS context
  #       uses: azure/aks-set-context@v3
  #       with:
  #         resource-group: ${{ secrets.AZURE_RESOURCE_GROUP }}
  #         cluster-name: ${{ secrets.AZURE_AKS_CLUSTER }}

  #     # 3. Deploy manifests
  #     - name: Deploy to Kubernetes
  #       uses: azure/k8s-deploy@v4
  #       with:
  #         manifests: |
  #           deploy/kubernetes/deployment.yaml
  #           deploy/kubernetes/service.yaml
  #         images: |
  #           ${{ secrets.DOCKER_USERNAME }}/devops-project:latest
  #         namespace: default
